steps:
  # first, test supported Julia versions (using local CUDA as installed on the system)
  - group: ":julia: Julia"
    key: "julia"
    steps:
      - label: "Julia {{matrix.julia}}"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1: ~
          - JuliaCI/julia-coverage#v1: ~
        agents:
          queue: "juliagpu"
          cuda: "*"
          multigpu: "*"
        if: build.message !~ /\[skip tests\]/
        timeout_in_minutes: 5
        matrix:
          setup:
            julia:
              - "1.8"
              - "1.9"
              - "1.10"

  # then, test supported CUDA toolkits (installed through the artifact system)
  - group: "CUDA"
    key: "cuda"
    depends_on: "julia"
    steps:
      - label: "CUDA {{matrix.cuda}}"
        plugins:
          - JuliaCI/julia#v1:
              version: 1.9
          - JuliaCI/julia-test#v1: ~
          - JuliaCI/julia-coverage#v1: ~
        agents:
          queue: "juliagpu"
          cuda: "*"
          multigpu: "*"
        if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
        timeout_in_minutes: 5
        matrix:
          setup:
            cuda:
              - "12.3"
              - "12.2"
              - "12.1"
              - "12.0"
              - "11.8"
              - "11.7"
              - "11.6"
              - "11.5"
              - "11.4"
        commands: |
          echo -e "[extras]\nCUDA_Runtime_jll = \"76a88914-d11a-5bdc-97e0-2f5a05c973a2\"\nCUDA_Driver_jll = \"4ee394cb-3365-5eb0-8335-949819d2adfc\"" >>test/Project.toml
          echo -e "[CUDA_Runtime_jll]\nversion = \"{{matrix.cuda}}\"" >test/LocalPreferences.toml
          echo -e "[CUDA_Driver_jll]\ncompat = \"false\"" >>test/LocalPreferences.toml

env:
  JULIA_PKG_SERVER_REGISTRY_PREFERENCE: "eager" # OK to downloading JLLs from GitHub
  SECRET_DOCUMENTER_KEY: "BT2YiDniO1BZSyHqEfE1IeBnyiYTuclnYVNhBppm9NX98qPWpNbxmEIK2u6k2xDRWZi8KTfZ+I36VCx1dFeStajGKlKWKLC9ptmYOD+21FS8oc7KQD1Tgh0XEhWJHdVeznF4VM4WPrH22/PHMVfg9Cc2j0twl0k+eANiIA/Eg1ROFcJdwoMZbJRyPY3XtEOOK8X0VDMeapoGPM+nd2uX+DJtGhcJF/8YQatMCM9d71UF6IGwNP5SzOpiK1qwwyv/xu86/s6g9QwYI7Rz1DxyI3zc1OeCwElyMIpjC3eB7Ske5/iTaExl1ajJSz5aWK38xtTqeXvF/DPe1fhAiCBEMg==;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"
