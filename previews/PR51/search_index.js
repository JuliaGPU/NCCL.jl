var documenterSearchIndex = {"docs":
[{"location":"#NCCL.jl","page":"NCCL.jl","title":"NCCL.jl","text":"","category":"section"},{"location":"","page":"NCCL.jl","title":"NCCL.jl","text":"A Julia wrapper for the NVIDIA Collective Communications Library (NCCL).","category":"page"},{"location":"#API","page":"NCCL.jl","title":"API","text":"","category":"section"},{"location":"","page":"NCCL.jl","title":"NCCL.jl","text":"CurrentModule = NCCL","category":"page"},{"location":"#Library","page":"NCCL.jl","title":"Library","text":"","category":"section"},{"location":"","page":"NCCL.jl","title":"NCCL.jl","text":"NCCL_jll.is_available\nversion()","category":"page"},{"location":"#NCCL_jll.is_available","page":"NCCL.jl","title":"NCCL_jll.is_available","text":"NCCL.is_available() :: Bool\n\nIs the NCCL library available?\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.version-Tuple{}","page":"NCCL.jl","title":"NCCL.version","text":"NCCL.version() :: VersionNumber\n\nGet the version of the current NCCL library.\n\n\n\n\n\n","category":"method"},{"location":"#Communicators","page":"NCCL.jl","title":"Communicators","text":"","category":"section"},{"location":"","page":"NCCL.jl","title":"NCCL.jl","text":"Communicator\nCommunicators\ndevice(comm::Communicator)\nsize(comm::Communicator)\nrank(comm::Communicator)\nabort(comm::Communicator)\ndefault_device_stream","category":"page"},{"location":"#NCCL.Communicator","page":"NCCL.jl","title":"NCCL.Communicator","text":"NCCL.Communicator(nranks, rank; [unique_id]) :: Communicator\n\nCreate a single communicator for use in a multi-threaded or multi-process environment. nranks is the number of ranks in the communicator, and rank is the 0-based index of the current rank. unique_id is an optional unique identifier for the communicator.\n\nExamples\n\ncomm = Communicator(length(CUDA.devices()), id, myid())\n# this blocks until all other ranks have connected\n\nExternal links\n\nncclCommInitRank\n\n\n\n\n\n","category":"type"},{"location":"#NCCL.Communicators","page":"NCCL.jl","title":"NCCL.Communicators","text":"NCCL.Communicators(devices) :: Vector{Communicator}\n\nConstruct and initialize a clique of NCCL Communicators over the devices on a single host.\n\ndevices can either be a collection of identifiers, or CuDevices.\n\nExamples\n\ncomms = NCCL.Communicators(CUDA.devices())\n\nExternal links\n\nncclCommInitAll\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.device-Tuple{Communicator}","page":"NCCL.jl","title":"NCCL.device","text":"NCCL.device(comm::Communicator) :: CuDevice\n\nThe device of the communicator\n\nExternal Links\n\nncclCommCuDevice\n\n\n\n\n\n","category":"method"},{"location":"#NCCL.size-Tuple{Communicator}","page":"NCCL.jl","title":"NCCL.size","text":"NCCL.size(comm::Communicator) :: Int\n\nThe number of communicators in the clique.\n\nExternal links\n\nncclCommCount\n\n\n\n\n\n","category":"method"},{"location":"#NCCL.rank-Tuple{Communicator}","page":"NCCL.jl","title":"NCCL.rank","text":"NCCL.rank(comm::Communicator) :: Int\n\nThe 0-based index of the communicator in the clique.\n\nExternal links\n\nncclCommUserRank\n\n\n\n\n\n","category":"method"},{"location":"#NCCL.abort-Tuple{Communicator}","page":"NCCL.jl","title":"NCCL.abort","text":"NCCL.abort(comm::Communicator)\n\nFrees resources that are allocated to comm. Will abort any uncompleted operations before destroying the communicator.\n\nExternal links\n\nncclCommAbort\n\n\n\n\n\n","category":"method"},{"location":"#NCCL.default_device_stream","page":"NCCL.jl","title":"NCCL.default_device_stream","text":"NCCL.default_device_stream(comm::Communicator) :: CuStream\n\nGet the default stream for device devid, or the device corresponding to communicator comm.\n\n\n\n\n\n","category":"function"},{"location":"#Groups","page":"NCCL.jl","title":"Groups","text":"","category":"section"},{"location":"","page":"NCCL.jl","title":"NCCL.jl","text":"group\ngroupStart\ngroupEnd","category":"page"},{"location":"#NCCL.group","page":"NCCL.jl","title":"NCCL.group","text":"NCCL.group(f)\n\nEvaluate f() inside between NCCL.groupStart() and NCCL.groupEnd().\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.groupStart","page":"NCCL.jl","title":"NCCL.groupStart","text":"NCCL.groupStart()\n\nStart a NCCL group call.\n\nExternal links\n\nncclGroupStart\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.groupEnd","page":"NCCL.jl","title":"NCCL.groupEnd","text":"NCCL.groupEnd()\n\nEnd a NCCL group call\n\nExternal links\n\nncclGroupEnd\n\n\n\n\n\n","category":"function"},{"location":"#Collective-communication","page":"NCCL.jl","title":"Collective communication","text":"","category":"section"},{"location":"","page":"NCCL.jl","title":"NCCL.jl","text":"Allreduce!\nBroadcast!\nReduce!\nAllgather!\nReduceScatter!\navg","category":"page"},{"location":"#NCCL.Allreduce!","page":"NCCL.jl","title":"NCCL.Allreduce!","text":"NCCL.Allreduce!(\n    sendbuf, recvbuf, op, comm::Communicator;\n    stream::CuStream=default_device_stream(comm))\n\nReduce array sendbuf using op (one of +, *, min, max, or NCCL.avg), writing the result to recvbuf to all ranks.\n\nExternal links\n\nncclAllReduce\n\n\n\n\n\nNCCL.Allreduce!(\n    sendrecvbuf, op, comm::Communicator;\n    stream::CuStream = default_device_stream(comm))\n\nReduce the array sendrecvbuf using op (one of +, *, min, max, or [NCCL.avg](@ref)), writing the result inplace to all ranks.\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.Broadcast!","page":"NCCL.jl","title":"NCCL.Broadcast!","text":"NCCL.Broadcast!(\n    sendbuf, recvbuf, comm::Communicator;\n    root = 0,\n    stream::CuStream = default_device_stream(comm))\n\nCopies array the sendbuf on rank root to recvbuf on all ranks.\n\nExternal links\n\nncclBroadcast\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.Reduce!","page":"NCCL.jl","title":"NCCL.Reduce!","text":"NCCL.Reduce!(\n    sendbuf, recvbuf, comm::Communicator;\n    root = 0,\n    stream::CuStream = default_device_stream(comm))\n\nReduce the array sendrecvbuf using op (one of +, *, min, max, or [NCCL.avg](@ref)), writing the result to recvbuf on rank root.\n\nExternal links\n\nncclReduce\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.Allgather!","page":"NCCL.jl","title":"NCCL.Allgather!","text":"NCCL.Allgather!(\n    sendbuf, recvbuf, comm::Communicator;\n    stream::CuStream = default_device_stream(comm))\n)\n\nConcatenate sendbuf from each rank into recvbuf on all ranks.\n\nExternal links\n\nncclAllGather\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.ReduceScatter!","page":"NCCL.jl","title":"NCCL.ReduceScatter!","text":"NCCL.ReduceScatter!(\n    sendbuf, recvbuf, op, comm::Communicator;\n    stream::CuStream = default_device_stream(comm))\n)\n\nReduce sendbuf from each rank using op, and leave the reduced result scattered over the devices such that recvbuf on each rank will contain the ith block of the result.\n\nExternal links\n\nncclReduceScatter\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.avg","page":"NCCL.jl","title":"NCCL.avg","text":"NCCl.avg\n\nPerform an average operation, i.e. a sum across all ranks, divided by the number of ranks.\n\n\n\n\n\n","category":"constant"},{"location":"#Point-to-point-communication","page":"NCCL.jl","title":"Point-to-point communication","text":"","category":"section"},{"location":"","page":"NCCL.jl","title":"NCCL.jl","text":"Send\nRecv!","category":"page"},{"location":"#NCCL.Send","page":"NCCL.jl","title":"NCCL.Send","text":"NCCL.Send(\n    sendbuf, comm::Communicator;\n    dest::Integer,\n    stream::CuStream = default_device_stream(comm))\n)\n\nSend data from sendbuf to rank dest. A matching Recv! must also be called.\n\nExternal links\n\nncclSend\n\n\n\n\n\n","category":"function"},{"location":"#NCCL.Recv!","page":"NCCL.jl","title":"NCCL.Recv!","text":"NCCL.Recv!(\n    recvbuf, comm::Communicator;\n    source::Integer,\n    stream::CuStream = default_device_stream(comm))\n)\n\nWrite the data from a matching Send on rank source into recvbuf.\n\nExternal links\n\nncclRecv\n\n\n\n\n\n","category":"function"}]
}
