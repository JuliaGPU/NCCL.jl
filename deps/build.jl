using CUDAapi

const config_path = joinpath(@__DIR__, "ext.jl")
const previous_config_path = config_path * ".bak"

function write_ext(config, path)
    open(path, "w") do io
        println(io, "# autogenerated file, do not edit")
        for (key,val) in config
            println(io, "const $key = $(repr(val))")
        end
    end
end

function read_ext(path)
    config = Dict{Symbol,Any}()
    r = r"^const (\w+) = (.+)$"
    open(path, "r") do io
        for line in eachline(io)
            m = match(r, line)
            if m != nothing
                config[Symbol(m.captures[1])] = eval(Meta.parse(m.captures[2]))
            end
        end
    end
    return config
end

function main()
    ispath(config_path) && mv(config_path, previous_config_path; force=true)
    config = Dict{Symbol,Any}(:configured => false)
    write_ext(config, config_path)


    ## discover stuff

    toolkit_dirs = CUDAapi.find_toolkit()

    config[:libnccl] = CUDAapi.find_cuda_library("nccl", toolkit_dirs)
    if config[:libnccl] == nothing
        error("could not find NCCL")
    end

    config[:configured] = true


    ## (re)generate ext.jl

    if isfile(previous_config_path)
        @debug("Checking validity of existing ext.jl...")
        previous_config = read_ext(previous_config_path)

        if config == previous_config
            @info "NCCL.jl has already been built for this toolchain, no need to rebuild"
            mv(previous_config_path, config_path; force=true)
            return
        end
    end

    write_ext(config, config_path)

    return
end

main()
